#To use AVX instead of SSE, you need to add -DCPUPBA_USE_AVX to CFLAGS
#################################################################



CUDA_INSTALL_PATH = /data/zhaoyong/Linux/Program/Libs/cuda-6.5
CUDA_LIB_PATH = $(CUDA_INSTALL_PATH)/lib64
ifdef CUDA_BIN_PATH
	NVCC = $(CUDA_BIN_PATH)/nvcc
else
	NVCC = $(CUDA_INSTALL_PATH)/bin/nvcc
endif
ifndef CUDA_INC_PATH
	CUDA_INC_PATH = $(CUDA_INSTALL_PATH)/include
endif
#################################################################

# detect OS
OSUPPER = $(shell uname -s 2>/dev/null | tr [:lower:] [:upper:])
OSLOWER = $(shell uname -s 2>/dev/null | tr [:upper:] [:lower:])
DARWIN = $(strip $(findstring DARWIN, $(OSUPPER)))


SHELL   = /bin/sh

BIN_DIR    = ./bin
SRC_PBA    = ./pba
SRC_DRIVER = ./demo
OUT_PBA    = ./bin
LIB_DIR    = ./lib

CC = g++-4.4
CFLAGS =  -O2 -Wno-deprecated -pthread  -march=native -mfpmath=sse -fpermissive -fPIC -I$(CUDA_INC_PATH) -L$(CUDA_LIB_PATH) -fPIC -L/usr/lib64 -L/usr/lib -L$(BIN_DIR)
NVCC_FLAGS = -I$(CUDA_INC_PATH) -O2 -Xcompiler -fPIC



# siftgpu header files
_HEADER_PBA = pba.h ConfigBA.h CuTexImage.h DataInterface.h ProgramCU.h SparseBundleCU.h
_HEADER_PBA_LIB = pba.h 
_OBJ_PBA = pba.o  ConfigBA.o  SparseBundleCPU.o pba_util.o

all: makepath pba driver 
 
#the dependencies of SiftGPU library 
DEPS_PBA = $(patsubst %, $(SRC_PBA)/%, $(_HEADER_PBA))

#rules for the rest of the object files
$(OUT_PBA)/%.o: $(SRC_PBA)/%.cpp $(DEPS_PBA) 
	$(CC) -o $@ $< $(CFLAGS) -c 

#build rule for CUDA 
$(OUT_PBA)/ProgramCU.o: $(SRC_PBA)/ProgramCU.cu $(DEPS_PBA)
	$(NVCC) $(NVCC_FLAGS) -o $@ $< -c
_OBJ_PBA += ProgramCU.o CuTexImage.o SparseBundleCU.o

OBJ_PBA  = $(patsubst %,$(OUT_PBA)/%,$(_OBJ_PBA))
LIBS_DRIVER = $(BIN_DIR)/libpba.a $(LIBS_PBA) 

pba: makepath $(OBJ_PBA)
	ar rcs $(BIN_DIR)/libpba.a $(OBJ_PBA)
	$(CC) -o $(BIN_DIR)/libpba.so -shared -fPIC  $(OBJ_PBA) $(LIBS_PBA) $(CFLAGS) -Wl,-rpath,$(CUDA_LIB_PATH) -lcudart 
	cp $(BIN_DIR)/libpba.a $(LIB_DIR)/
	cp $(BIN_DIR)/libpba.so $(LIB_DIR)/
	
 
driver: makepath 
	$(CC) -o $(BIN_DIR)/driver $(SRC_DRIVER)/driver.cpp -lpba -Wl,-rpath,$(CUDA_LIB_PATH)  -lcudart $(CFLAGS) 
	
makepath:
	mkdir -p $(OUT_PBA)
	mkdir -p $(BIN_DIR) 
 
clean:
	rm -f $(OUT_PBA)/*.o
	rm -f $(BIN_DIR)/libpba.a
	rm -f $(BIN_DIR)/libpba.so
	rm -f $(BIN_DIR)/driver

cleanObj:
	rm -f $(OUT_PBA)/*.o
